initialize() {	

	 if (!exists("output_path")) {
        defineConstant("output_path", "simpler_adapt_v1.trees");
    }
    
    if (!exists("txt_path")) {
        defineConstant("txt_path", "simpler_adapt_v1.txt");
    }
    
    if (!exists("adm_amount")) {
        defineConstant("adm_amount", 0.04);
    }
    if (!exists("adm_time")) {
        defineConstant("adm_time", 8714);
    }
    //not used
    if (!exists("sel_time")) {
        defineConstant("sel_time", 0);
    }  
    if (!exists("seq_length")) {
        defineConstant("seq_length", 5000000);
    }
        
    print("Relevant parameters: ");
    print("adm_amount: " + adm_amount);
    print("adm_time: " + adm_time);
    print("sel_time: " + sel_time);
    print("output_path: " + output_path);
    print("txt_path: " + txt_path);
    

	initializeSLiMOptions(keepPedigrees = T);

	initializeTreeSeq();
	
	initializeMutationRate(1e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 1.0, "f", 0.5);    // introduced mutation
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, seq_length-1);
	initializeRecombinationRate(1e-8);
	
	
	

}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", 730); 
	//sim.addSubpop("p2", 500);
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	
	//p1.genomes.addNewDrawnMutation(m1, asInteger(L * 0.2));

	//p3.setMigrationRates(c(p1, p2), c(0.5, 0.5));
}

7300 early() { 
sim.addSubpopSplit("p2", 100, p1); 
} 

7399 late() { 
sim.outputFull(txt_path); 
} 

7400 late(){ 
target = sample(p2.genomes, 200); //fix it in source pop 
target.addNewDrawnMutation(m2, 2730973); //random mutation in the middle of the segment 

rm("simID"); 
defineGlobal("simID",getSeed()); 
sim.outputMutations(sim.mutationsOfType(m2)); 
} 


7400: 8900 late() { 

    muts = sim.mutationsOfType(m2);
    if (size(muts) != 1) {
    	  
    	  print("Finish due to no mutation of type 2");
    	  print("Finish due to no mutation of type 2, num: " );
    	  print("Finish due to no mutation of type 2, num: " + (size(muts)));
        cat("Skipping this run due to unexpected number of m2 mutations: " + string(size(muts)), "\n");
        //sim.simulationFinished();
        
        cat("RESTART \n"); sim.readFromPopulationFile(txt_path); 
setSeed(getSeed() + 1); //sim.simulationFinished(); 
rm("simID"); rm("newsel"); 
defineGlobal("simID",getSeed()); //defineGlobal("newsel",runif(1,0.0001*10,0.01*10)); 
        
        
    }
    else{
    
    }

} 




// Neanderthal hybridization 
adm_time late() { 
sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); 
sim.addSubpopSplit("p4", 186, p1); 
p4.setMigrationRates(c(p1,p2), c(0.0, adm_amount)); 
} 

adm_time+1 late() { 
p4.setMigrationRates(c(p1,p2), c(0.0, 0.0)); 

//p3.setSubpopulationSize(0); 
} 

8741 late(){sim.outputMutations(sim.mutationsOfType(m2)); } 

//Neanderthal sample 
8748 late() { 
sim.outputMutations(sim.mutationsOfType(m2)); 
print(sim.mutationFrequencies(p4, sim.mutationsOfType(m2))); 
sim.treeSeqRememberIndividuals(sample(p2.individuals, 2)); 
p2.setSubpopulationSize(0); 
} 

8740 late(){sim.outputMutations(sim.mutationsOfType(m2)); } 

8900 late() { 
sim.outputMutations(sim.mutationsOfType(m2)); 
cat("Frequencies: "); 
print(sim.mutationFrequencies(p4, sim.mutationsOfType(m2))); 
print(sim.mutationsOfType(m2));
print(size(sim.mutationsOfType(m2)));
print("Frequencies of mut2: p1, p4");
print(sim.mutationFrequencies(p1, sim.mutationsOfType(m2))); 
//print(sim.mutationFrequencies(p2, sim.mutationsOfType(m2))); 
//print(sim.mutationFrequencies(p3, sim.mutationsOfType(m2))); 
print(sim.mutationFrequencies(p4, sim.mutationsOfType(m2))); 
print("Final output");
sim.outputMutations(sim.mutationsOfType(m2)); 
sim.treeSeqOutput(output_path); 
} 

