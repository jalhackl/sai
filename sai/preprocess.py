# Copyright 2024 Xin Huang
#
# GNU General Public License v3.0
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, please see
#
#    https://www.gnu.org/licenses/gpl-3.0.en.html


import os
import pandas as pd
from multiprocessing import Lock
from sai.utils.multiprocessing import mp_manager
from sai.utils.generators import WindowDataGenerator
from sai.utils.preprocessors import FeatureVectorsPreprocessor
from sai.utils.generators import FileGenerator

from sai.utils.generators import SaiWindowDataGenerator
from sai.utils.preprocessors import SaiFeatureVectorsPreprocessor

from sai.utils.preprocessors import SaiLRPreprocessor
from sai.utils.preprocessors import SaiStatPreprocessor


def lr_preprocess(
    vcf_file: str,
    chr_name: str,
    ref_ind_file: str,
    tgt_ind_file: str,
    win_len: int,
    win_step: int,
    feature_config: str,
    output_dir: str,
    output_prefix: str = "lr",
    nprocess: int = 1,
    ploidy: int = 2,
    is_phased: bool = True,
    anc_allele_file: str = None,
) -> None:
    """
    Preprocess genomic data to generate feature vectors for machine learning models.

    This function orchestrates the preprocessing pipeline by initializing a genomic data generator
    and a feature vector preprocessor. It utilizes multiprocessing to efficiently process large
    genomic datasets, generating feature vectors based on the specified configuration.

    Parameters
    ----------
    vcf_file : str
        Path to the VCF file containing genomic variants.
    chr_name : str
        Name of the chromosome to process.
    ref_ind_file : str
        Path to the file listing reference individual identifiers.
    tgt_ind_file : str
        Path to the file listing target individual identifiers.
    win_len : int
        Length of the sliding window for analysis, in base pairs.
    win_step : int
        Step size for the sliding window, in base pairs.
    feature_config : str
        Path to the YAML configuration file specifying the features to be computed.
    output_dir : str
        Directory where output files will be saved.
    output_prefix : str, optional
        Prefix for the output files generated by the preprocessor. Default: 'lr'.
    nprocess : int, optional
        Number of worker processes to use for parallel processing. Default: 1.
    ploidy : int, optional
        Ploidy of the samples, typically 2 for diploid organisms. Default: 2.
    is_phased : bool, optional
        Indicates whether the genomic data is phased. Default: True.
    anc_allele_file : str, optional
        Path to the file containing ancestral allele information. Default: None.

    Raises
    ------
    ValueError
        If any of the provided parameters are invalid, such as negative window lengths or step sizes.

    """
    if nprocess <= 0:
        raise ValueError("Number of processes must be greater than 0.")

    generator = WindowDataGenerator(
        vcf_file=vcf_file,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        anc_allele_file=anc_allele_file,
        ploidy=ploidy,
        is_phased=is_phased,
        chr_name=chr_name,
        win_len=win_len,
        win_step=win_step,
    )

    preprocessor = FeatureVectorsPreprocessor(
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        feature_config=feature_config,
    )
    res = mp_manager(job=preprocessor, data_generator=generator, nprocess=nprocess)

    if res == "error":
        raise SystemExit("Some errors occurred, stopping the program ...")

    res.sort(key=lambda x: (x["Chromosome"], x["Start"], x["End"]))

    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, f"{output_prefix}.features")
    pd.DataFrame(res).to_csv(output_file, sep="\t", index=False)


def Sai_lr_preprocess(
    vcf_file: str,
    chr_name: str,
    ref_ind_file: str,
    tgt_ind_file: str,
    win_len: int,
    win_step: int,
    feature_config: str,
    output_dir: str,
    output_prefix: str = "lr",
    nprocess: int = 1,
    ploidy: int = 2,
    is_phased: bool = True,
    anc_allele_file: str = None,
    src_ind_file: str = None,
    mut_file: str = None,
) -> None:
    """
    Preprocess genomic data to generate feature vectors for machine learning models.

    This function orchestrates the preprocessing pipeline by initializing a genomic data generator
    and a feature vector preprocessor. It utilizes multiprocessing to efficiently process large
    genomic datasets, generating feature vectors based on the specified configuration.

    Parameters
    ----------
    vcf_file : str
        Path to the VCF file containing genomic variants.
    chr_name : str
        Name of the chromosome to process.
    ref_ind_file : str
        Path to the file listing reference individual identifiers.
    tgt_ind_file : str
        Path to the file listing target individual identifiers.
    win_len : int
        Length of the sliding window for analysis, in base pairs.
    win_step : int
        Step size for the sliding window, in base pairs.
    feature_config : str
        Path to the YAML configuration file specifying the features to be computed.
    output_dir : str
        Directory where output files will be saved.
    output_prefix : str, optional
        Prefix for the output files generated by the preprocessor. Default: 'lr'.
    nprocess : int, optional
        Number of worker processes to use for parallel processing. Default: 1.
    ploidy : int, optional
        Ploidy of the samples, typically 2 for diploid organisms. Default: 2.
    is_phased : bool, optional
        Indicates whether the genomic data is phased. Default: True.
    anc_allele_file : str, optional
        Path to the file containing ancestral allele information. Default: None.

    Raises
    ------
    ValueError
        If any of the provided parameters are invalid, such as negative window lengths or step sizes.

    """
    if nprocess <= 0:
        raise ValueError("Number of processes must be greater than 0.")

    generator = SaiWindowDataGenerator(
        vcf_file=vcf_file,
        src_ind_file=src_ind_file,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        anc_allele_file=anc_allele_file,
        ploidy=ploidy,
        is_phased=is_phased,
        chr_name=chr_name,
        win_len=win_len,
        win_step=win_step,
    )

    preprocessor = SaiFeatureVectorsPreprocessor(
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        src_ind_file=src_ind_file,
        feature_config=feature_config,
    )
    res = mp_manager(job=preprocessor, data_generator=generator, nprocess=nprocess)

    if res == "error":
        raise SystemExit("Some errors occurred, stopping the program ...")

    res.sort(key=lambda x: (x["Chromosome"], x["Start"], x["End"]))

    df_res = pd.DataFrame(res)

    if mut_file:
        from sai.utils.labelers.labelers_utils import (
            label_mutation_overlap,
            extract_mutation_positions,
        )

        muts_of_interest = extract_mutation_positions(mutation_file=mut_file)
        df_res = label_mutation_overlap(
            muts_of_interest, df_res, start_col="Start", end_col="End"
        )

    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, f"{output_prefix}.features")
    df_res.to_csv(output_file, sep="\t", index=False)

    df_res["file"] = vcf_file
    return df_res


def Sai_lr_process_folder_StatProcessor(
    vcf_location: str,
    feature_config,
    output_dir,
    ref_ind_file=None,
    tgt_ind_file=None,
    src_ind_file=None,
    chr_name="1",
    win_len=50000,
    win_step=10000,
    nprocess=1,
    vcf_ending=".vcf.gz",
    sample_file_suffix="ind.list",
    num_src=1,
    anc_allele_file=None,
) -> None:
    """
    apply SAI feature computation to all files of a location (including subfolders)

    Preprocess VCF files and run the UNet data preprocessing simulation.

    This function processes a VCF file or a directory containing VCF files,
    and then uses the `SaiLRPreprocessor` to prepare data for further processing
    or simulation.

    Parameters
    ----------
    vcf_location : str
        Path to a VCF file or directory containing VCF files.
    feature_config : dict
        Configuration dictionary specifying which statistics or features to compute.
    output_dir : str
        Directory where the output files will be saved.
    ref_ind_file : str, optional
        Path to the reference individuals list file.
    tgt_ind_file : str, optional
        Path to the target individuals list file.
    src_ind_file : str, optional
        Path to the source individuals list file.
    chr_name : str, optional
        Chromosome name, by default "1".
    win_len : int, optional
        Window length for computing statistics, by default 50,000 bp.
    win_step : int, optional
        Step size between consecutive windows, by default 10,000 bp.
    nprocess : int, optional
        Number of parallel processes to use, by default 1.
    vcf_ending : str, optional
        File suffix for VCF files, by default ".vcf.gz".
    sample_file_suffix : str, optional
        Suffix used for sample list files, by default "ind.list".
    num_src : int, optional
        Number of source populations or individuals, by default 1.
    anc_allele_file : str, optional
        Path to ancestral allele file, if available.



    """

    simulator = SaiStatPreprocessor(
        chr_name=chr_name,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        src_ind_file=src_ind_file,
        win_len=win_len,
        win_step=win_step,
        feature_config=feature_config,
        output_dir=output_dir,
        num_src=num_src,
        anc_allele_file=anc_allele_file,
        num_workers=nprocess,
    )

    generator = FileGenerator(
        file_location=vcf_location,
        file_ending=vcf_ending,
        return_rep=False,
        only_one_type=False,
        sample_file_suffix=sample_file_suffix,
    )

    all_res = mp_manager(
        job=simulator,
        data_generator=generator,
        nprocess=nprocess,
    )

    return all_res


def Sai_lr_process_folder(
    vcf_location: str,
    feature_config,
    output_dir,
    ref_ind_file=None,
    tgt_ind_file=None,
    src_ind_file=None,
    chr_name="1",
    win_len=50000,
    win_step=10000,
    nprocess=1,
    label_data=True,
    vcf_ending=".vcf.gz",
    sample_file_suffix="ind.list",
) -> None:
    """
    apply SAI feature computation to all files of a location (including subfolders)

    Parameters
    ----------
    vcf_location : str
        Path to a VCF file or directory containing VCF files.
    feature_config : dict
        Configuration dictionary specifying which features to extract or compute.
    output_dir : str
        Directory where the output files will be saved.
    ref_ind_file : str, optional
        Path to the reference individuals list file.
    tgt_ind_file : str, optional
        Path to the target individuals list file.
    src_ind_file : str, optional
        Path to the source individuals list file.
    chr_name : str, optional
        Chromosome name, by default "1".
    win_len : int, optional
        Window length for feature extraction, by default 50,000 bp.
    win_step : int, optional
        Step size between consecutive windows, by default 10,000 bp.
    nprocess : int, optional
        Number of parallel processes to use, by default 1.
    label_data : bool, optional
        Whether to label the generated data, by default True.
    vcf_ending : str, optional
        File suffix for VCF files, by default ".vcf.gz".
    sample_file_suffix : str, optional
        Suffix used for sample list files, by default "ind.list".

    """

    simulator = SaiLRPreprocessor(
        chr_name=chr_name,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        src_ind_file=src_ind_file,
        win_len=win_len,
        win_step=win_step,
        feature_config=feature_config,
        output_dir=output_dir,
        nprocess=nprocess,
        label_data=label_data,
    )

    generator = FileGenerator(
        file_location=vcf_location,
        file_ending=vcf_ending,
        return_rep=False,
        only_one_type=False,
        sample_file_suffix=sample_file_suffix,
    )

    all_res = mp_manager(
        job=simulator,
        data_generator=generator,
        nprocess=nprocess,
    )

    return all_res
