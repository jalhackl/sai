# Copyright 2024 Xin Huang
#
# GNU General Public License v3.0
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, please see
#
#    https://www.gnu.org/licenses/gpl-3.0.en.html


import os
import pandas as pd
from multiprocessing import Lock
from sai.utils.multiprocessing import mp_manager
from sai.utils.generators import WindowDataGenerator
from sai.utils.preprocessors import FeatureVectorsPreprocessor
from sai.utils.generators import FileGenerator

from sai.utils.generators import SaiWindowDataGenerator
from sai.utils.preprocessors import SaiFeatureVectorsPreprocessor

from sai.utils.preprocessors import SaiLRPreprocessor

def lr_preprocess(
    vcf_file: str,
    chr_name: str,
    ref_ind_file: str,
    tgt_ind_file: str,
    win_len: int,
    win_step: int,
    feature_config: str,
    output_dir: str,
    output_prefix: str = "lr",
    nprocess: int = 1,
    ploidy: int = 2,
    is_phased: bool = True,
    anc_allele_file: str = None,
) -> None:
    """
    Preprocess genomic data to generate feature vectors for machine learning models.

    This function orchestrates the preprocessing pipeline by initializing a genomic data generator
    and a feature vector preprocessor. It utilizes multiprocessing to efficiently process large
    genomic datasets, generating feature vectors based on the specified configuration.

    Parameters
    ----------
    vcf_file : str
        Path to the VCF file containing genomic variants.
    chr_name : str
        Name of the chromosome to process.
    ref_ind_file : str
        Path to the file listing reference individual identifiers.
    tgt_ind_file : str
        Path to the file listing target individual identifiers.
    win_len : int
        Length of the sliding window for analysis, in base pairs.
    win_step : int
        Step size for the sliding window, in base pairs.
    feature_config : str
        Path to the YAML configuration file specifying the features to be computed.
    output_dir : str
        Directory where output files will be saved.
    output_prefix : str, optional
        Prefix for the output files generated by the preprocessor. Default: 'lr'.
    nprocess : int, optional
        Number of worker processes to use for parallel processing. Default: 1.
    ploidy : int, optional
        Ploidy of the samples, typically 2 for diploid organisms. Default: 2.
    is_phased : bool, optional
        Indicates whether the genomic data is phased. Default: True.
    anc_allele_file : str, optional
        Path to the file containing ancestral allele information. Default: None.

    Raises
    ------
    ValueError
        If any of the provided parameters are invalid, such as negative window lengths or step sizes.

    """
    if nprocess <= 0:
        raise ValueError("Number of processes must be greater than 0.")

    generator = WindowDataGenerator(
        vcf_file=vcf_file,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        anc_allele_file=anc_allele_file,
        ploidy=ploidy,
        is_phased=is_phased,
        chr_name=chr_name,
        win_len=win_len,
        win_step=win_step,
    )

    preprocessor = FeatureVectorsPreprocessor(
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        feature_config=feature_config,
    )
    res = mp_manager(job=preprocessor, data_generator=generator, nprocess=nprocess)

    if res == "error":
        raise SystemExit("Some errors occurred, stopping the program ...")

    res.sort(key=lambda x: (x["Chromosome"], x["Start"], x["End"]))

    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, f"{output_prefix}.features")
    pd.DataFrame(res).to_csv(output_file, sep="\t", index=False)


def Sai_lr_preprocess(
    vcf_file: str,
    chr_name: str,
    ref_ind_file: str,
    tgt_ind_file: str,
    win_len: int,
    win_step: int,
    feature_config: str,
    output_dir: str,
    output_prefix: str = "lr",
    nprocess: int = 1,
    ploidy: int = 2,
    is_phased: bool = True,
    anc_allele_file: str = None,
    src_ind_file: str = None,
) -> None:
    """
    Preprocess genomic data to generate feature vectors for machine learning models.

    This function orchestrates the preprocessing pipeline by initializing a genomic data generator
    and a feature vector preprocessor. It utilizes multiprocessing to efficiently process large
    genomic datasets, generating feature vectors based on the specified configuration.

    Parameters
    ----------
    vcf_file : str
        Path to the VCF file containing genomic variants.
    chr_name : str
        Name of the chromosome to process.
    ref_ind_file : str
        Path to the file listing reference individual identifiers.
    tgt_ind_file : str
        Path to the file listing target individual identifiers.
    win_len : int
        Length of the sliding window for analysis, in base pairs.
    win_step : int
        Step size for the sliding window, in base pairs.
    feature_config : str
        Path to the YAML configuration file specifying the features to be computed.
    output_dir : str
        Directory where output files will be saved.
    output_prefix : str, optional
        Prefix for the output files generated by the preprocessor. Default: 'lr'.
    nprocess : int, optional
        Number of worker processes to use for parallel processing. Default: 1.
    ploidy : int, optional
        Ploidy of the samples, typically 2 for diploid organisms. Default: 2.
    is_phased : bool, optional
        Indicates whether the genomic data is phased. Default: True.
    anc_allele_file : str, optional
        Path to the file containing ancestral allele information. Default: None.

    Raises
    ------
    ValueError
        If any of the provided parameters are invalid, such as negative window lengths or step sizes.

    """
    if nprocess <= 0:
        raise ValueError("Number of processes must be greater than 0.")


    generator = SaiWindowDataGenerator(
        vcf_file=vcf_file,
        src_ind_file=src_ind_file,
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        anc_allele_file=anc_allele_file,
        ploidy=ploidy,
        is_phased=is_phased,
        chr_name=chr_name,
        win_len=win_len,
        win_step=win_step,
    )



    preprocessor = SaiFeatureVectorsPreprocessor(
        ref_ind_file=ref_ind_file,
        tgt_ind_file=tgt_ind_file,
        src_ind_file=src_ind_file,
        feature_config=feature_config,
    )
    res = mp_manager(job=preprocessor, data_generator=generator, nprocess=nprocess)

    if res == "error":
        raise SystemExit("Some errors occurred, stopping the program ...")

    res.sort(key=lambda x: (x["Chromosome"], x["Start"], x["End"]))

    df_res = pd.DataFrame(res)

    os.makedirs(output_dir, exist_ok=True)
    output_file = os.path.join(output_dir, f"{output_prefix}.features")
    df_res.to_csv(output_file, sep="\t", index=False)

    df_res["file"] = vcf_file
    return df_res




def Sai_lr_process_folder(
    vcf_location: str,
    chr_name,
    ref_ind_file,
    tgt_ind_file,
    src_ind_file,
    win_len,
    win_step,
    feature_config,
    output_dir,
    nprocess=1,
) -> None:
    """
    Preprocess VCF files and run the UNet data preprocessing simulation.

    This function processes a VCF file or a directory containing VCF files,
    and then uses the `SaiLRPreprocessor` to prepare data for further processing
    or simulation. 

    Parameters
    ----------
    vcf_location : str
        Path to a VCF file or directory containing VCF files.
    ploidy : int
        The ploidy value to be used in the simulation.
    output_prefix : str
        Prefix to be used for the output files.
    output_dir : str
        Directory where the output files will be saved.
    output_h5 : bool
        If True, the output will be saved in HDF5 format.
    is_phased : bool
        If True, the VCF file is assumed to be phased.
    is_sorted : bool
        If True, the VCF file is assumed to be sorted.
    num_polymorphisms : int
        The number of polymorphisms to be used in the simulation.
    num_upsamples : int
        The number of upsample iterations to perform.
    nprocess : int
        The number of processes to run in parallel.
    chunk_size : int
        The chunk size for processing HDF5 files.
    step_size : int
        The step size for processing the VCF file.

    Raises
    ------
    SystemExit
        If the provided `vcf_location` is neither a valid file nor a directory.

    Returns
    -------
    None
        This function does not return any value. It performs data processing and
        manages parallelization.


    """


    simulator = SaiLRPreprocessor(
    chr_name=chr_name,
    ref_ind_file=ref_ind_file,
    tgt_ind_file=tgt_ind_file,
    src_ind_file=src_ind_file,
    win_len=win_len,
    win_step=win_step,
    feature_config=feature_config,
    output_dir=output_dir,
    nprocess=nprocess,
)


    generator = FileGenerator(file_location=vcf_location, file_ending=".vcf.gz")

    all_res = mp_manager(
        job=simulator,
        data_generator=generator,
        nprocess=nprocess,
        #lock=lock
    )

    return all_res


